
/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.BNMO;

import java.util.Scanner;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.NoSuchElementException;
import java.lang.Exception;

import com.BNMO.Object.Object;
import com.BNMO.Object.NonFoodObjects.NonFoodObjects;
import com.BNMO.Object.NonFoodObjects.AudioPlayer.AudioPlayer;
import com.BNMO.Object.NonFoodObjects.TV.*;
import com.BNMO.Object.NonFoodObjects.TableAndChair.TableAndChair;
import com.BNMO.Object.NonFoodObjects.Toilet.Toilet;
import com.BNMO.Object.NonFoodObjects.Book.*;
import com.BNMO.Object.NonFoodObjects.Bed.*;
import com.BNMO.Object.NonFoodObjects.Piano.Piano;
import com.BNMO.Object.NonFoodObjects.Clock.Clock;
import com.BNMO.Object.NonFoodObjects.GameStation.*;
import com.BNMO.Object.NonFoodObjects.Stove.*;
import com.BNMO.Buildings.*;
import com.BNMO.Object.Food.*;

import com.BNMO.Utilities.*;
import com.BNMO.SIMS.Job;
import com.BNMO.SIMS.Sim;

public class App {
    public static void main(String[] args) {
        DayThread dayThread = DayThread.getInstance();
        Thread dailyThread = new Thread(dayThread);
        dailyThread.start();
        dayThread.pauseThread();
        Scanner userInput = new Scanner(System.in);
        System.out.println("Selamat Datang di Sim-Plicity!");
        System.out.print("Apakah kamu ingin memulai permainan? (Y/N) ");
        String startGame = userInput.nextLine();
        System.out.println();

        Menu menu = Menu.getInstance();

        while (!startGame.equals("Y") && !startGame.equals("N")) {
            System.out.println("Masukkan Y atau N!");
            System.out.print("Apakah kamu ingin memulai permainan? (Y/N) ");
            startGame = userInput.nextLine();
            System.out.println();
        }

        if (startGame.equals("Y")) {
            System.out.println("Masukkan nama sim: ");
            String simName = userInput.nextLine();
            Sim initSim = new Sim(simName);
            menu.setCurrentSim(initSim);
            System.out.println();
            menu.start();

            World world = World.getInstance();

            System.out.println();
            menu.viewSimInfo();
            System.out.println();

            while (menu.isGameStarted() && menu.getCurrentSim().isAlive()) {
                System.out.println("Apa yang ingin kamu lakukan?");
                System.out.println("[1] Help");
                System.out.println("[2] Lihat info sim");
                System.out.println("[3] Lihat info ruangan");
                System.out.println("[4] Melihat Map");
                System.out.println("[5] Menambah SIMS");
                System.out.println("[6] Mengganti SIMS");
                System.out.println("[7] Mengganti pekerjaan");
                System.out.println("[8] Melakukan aktivitas");
                System.out.println("[9] Melihat waktu");
                System.out.println("[10] Berpindah ruangan");
                System.out.println("[11] Melihat inventory");
                System.out.println("[12] Exit");
                System.out.println();

                System.out.println("Masukkan perintah: (dalam angka)");
                String command;
                try {
                    command = userInput.nextLine();
                } catch (NoSuchElementException e) {
                    userInput.close();
                    userInput = new Scanner(System.in);
                    command = userInput.nextLine();
                }

                int commandNum;
                try {
                    commandNum = Integer.parseInt(command);
                } catch (NumberFormatException e) {
                    System.out.println("Masukan harus dalam bentuk angka!");
                    command = userInput.nextLine();
                    commandNum = Integer.parseInt(command);
                }

                ArrayList<Integer> validCommands = new ArrayList<Integer>();
                for (int i = 1; i <= 12; i++) {
                    validCommands.add(i);
                }

                while (!validCommands.contains(commandNum)) {
                    System.out.println("Masukkan perintah yang valid!");
                    System.out.println("Masukkan perintah: (dalam angka)");
                    command = userInput.nextLine();
                    commandNum = Integer.parseInt(command);
                }

                if (commandNum == 1) {
                    // HELP
                    System.out.println();
                    System.out.println("Kamu memanggil help!");
                    menu.help();
                    System.out.println();
                } else if (commandNum == 2) {
                    System.out.println();
                    System.out.println("Berikut adalah info sim kamu:");
                    // menu.viewSimInfo();
                    System.out.println();
                } else if (commandNum == 3) {
                    System.out.println();
                    System.out.println("Berikut adalah info ruangan kamu:");
                    world.printHouseLayout(menu.getCurrentSim().getCurrentHouse(),
                            menu.getCurrentSim().getCurrentRoom());
                    System.out.println();
                    menu.getCurrentSim().getCurrentHouse().printRooms();
                    System.out.println();
                } else if (commandNum == 4) {
                    // MAP
                    System.out.println();
                    System.out.println("Berikut adalah Map:");
                    world.printMap();
                } else if (commandNum == 5) {
                    if (!dayThread.getChangeSimToday()) {
                        System.out.println("Kamu sudah menambah SIM hari ini!");
                        System.out.println();
                        continue;
                    } else {
                    System.out.println();
                    System.out.println("Masukkan nama sim yang ingin kamu tambahkan: ");
                    String newSimName = userInput.nextLine();

                    ArrayList<String> simNames = new ArrayList<String>();
                    for (Sim sim : Sim.getSims()) {
                        simNames.add(sim.getName().toLowerCase().replaceAll("\\s+", ""));
                    }

                    while (true) {
                        try {
                            if (simNames.contains(newSimName.toLowerCase().replaceAll("\\s+", ""))) {
                                throw new Exception();
                            }
                            break;
                        } catch (Exception e) {
                            System.out.println("Nama sim sudah ada!");
                            System.out.println("Masukkan nama sim yang ingin kamu tambahkan: ");
                            newSimName = userInput.nextLine();
                        }
                    }
                        System.out.println("Berikut peta dunia sekarang: ");
                        try {
                            Thread.sleep(3000);
                        } catch (InterruptedException e) {
                            System.out.println("got interrupted!");
                        }
                        world.printMap();
                    System.out.println("Masukkan x point rumah: ");
                    String newXPoint = userInput.nextLine();

                        int newXPointInt = 0;

                        while (true) {
                            try {
                                if (newXPoint.toLowerCase().replaceAll("\\s+", "").equals("cancel")) {
                                    break;
                                } else {
                                    newXPointInt = Integer.parseInt(newXPoint);
                                    if (newXPointInt < 0 || newXPointInt > 65) {
                                        throw new Exception("Point harus berada dari 0 hingga 64!");
                                    } else if (newXPointInt % 3 == 0) {
                                        throw new Exception("Point x tidak boleh kelipatan 3 karena merupakan jalan!");
                                    }
                                    break;
                                }
                            } catch (Exception e) {
                                System.out.println(e.getMessage());
                                System.out.println("Masukkan x point rumah: ");
                                newXPoint = userInput.nextLine();
                            }
                        }

                    System.out.println("Masukkan y point rumah: ");
                    String newYPoint = userInput.nextLine();
                    // TODO validasi point di world

                        int newYPointInt = 0;

                        while (true) {
                            try {
                                if (newYPoint.toLowerCase().replaceAll("\\s+", "").equals("cancel")) {
                                    break;
                                } else {
                                    newYPointInt = Integer.parseInt(newYPoint);
                                    if (newYPointInt < 0 || newYPointInt > 65) {
                                        throw new Exception("Point harus berada dari 0 hingga 64!");
                                    } else if (newYPointInt % 5 == 0) {
                                        throw new Exception("Point y tidak boleh kelipatan 5 karena merupakan jalan!");
                                    }
                                    break;
                                }
                            } catch (Exception e) {
                                System.out.println(e.getMessage());
                                System.out.println("Masukkan y point rumah: ");
                                newYPoint = userInput.nextLine();
                            }
                        }

                        if (newXPoint.toLowerCase().replaceAll("\\s+", "").equals( "cancel") || newYPoint.toLowerCase().replaceAll("\\s+", "").equals("cancel")) {
                            continue;
                        } else {
                            menu.addSim(new Sim(newSimName, new Point(newXPointInt, newYPointInt)));
                    menu.viewSimList();
                    System.out.println();
                        }
                    }

                } else if (commandNum == 6) {
                    System.out.println();
                    System.out.println("Masukkan nama sim yang ingin kamu mainkan: ");
                    String wantedSim = userInput.nextLine();
                    menu.changeSim(wantedSim);
                    System.out.println();
                } else if (commandNum == 7) {
                    if (!dayThread.getWorkAvail()) {
                        System.out.println("Pekerjaan hanya bisa diganti saat telah berganti hari!");
                        continue;
                    } else {
                        System.out.println();
                        System.out.println("Berikut adalah pekerjaan-pekerjaan yang bisa kamu pilih!");
                        Job.printListOfJobs();
                        System.out
                                .println(
                                        "Masukkan nama pekerjaan yang kamu inginkan: (\"cancel\" jika ingin membatalkan)");
                        String wantedJob = userInput.nextLine();

                        while (true) {
                            try {
                                if (wantedJob.equals("cancel")) {
                                    break;
                                } else if (Job.isJobExist(wantedJob)) {
                                    break;
                                } else if (menu.getCurrentSim().getJob().getName().toLowerCase().replaceAll("\\s+", "").equals(wantedJob)) {
                                    throw new Exception("Kamu sudah memiliki pekerjaan ini!");
                                } else {
                                    throw new Exception("Pekerjaan tidak ditemukan!");
                                }
                            } catch (Exception e) {
                                System.out.println(e.getMessage());
                                System.out.println("Masukkan nama pekerjaan yang kamu inginkan: ");
                                wantedJob = userInput.nextLine();
                            }
                        }
                        System.out.println("this your wantedJob" + wantedJob);

                        if (wantedJob.equals("cancel")) {
                            System.out.println("Penggantian pekerjaan dibatalkan!");
                            break;
                        } else {
                            int jobIndex = Job.getJobIndex(wantedJob);
                            int i = 0;

                            String[] jobNames = new String[Job.getJobs().size()];

                            for (String key : Job.getJobs().keySet()) {
                                jobNames[i] = key;
                                i++;
                            }

                            System.out.println("Kamu telah memilih pekerjaan " + jobNames[jobIndex]);
                            menu.getCurrentSim().changeJob(jobNames[jobIndex]);
                            System.out.println();
                            dayThread.setWorkAvail(false);
                        }
                    }
                } else if (commandNum == 8) {
                    System.out.println();
                    System.out.println("Berikut adalah aktivitas-aktivitas yang bisa kamu lakukan!");
                    System.out.println("[1] Kerja");
                    System.out.println("[2] Olahraga");
                    System.out.println("[3] Tidur");
                    System.out.println("[4] Makan");
                    System.out.println("[5] Memasak");
                    System.out.println("[6] Berkunjung");
                    System.out.println("[7] Buang air");
                    System.out.println("[8] Upgrade rumah");
                    System.out.println("[9] Membeli barang");
                    System.out.println("[10] Membaca");
                    System.out.println("[11] menulis");
                    System.out.println("[12] Mendengarkan musik");
                    System.out.println("[13] Menonton TV");
                    System.out.println("[14] Bermain piano");
                    System.out.println("[15] Bermain game");
                    System.out.println("[16] Baca jurnal");
                    System.out.println("[17] Bersihin toilet");
                    System.out.println();

                    System.out.println("Masukkan perintah: (dalam angka, cancel untuk membatalkan)");
                    String activity = userInput.nextLine();
                    int activityNum = 0;
                    boolean cancelAct = false;

                    ArrayList<Integer> validActivities = new ArrayList<Integer>();
                    for (int i = 1; i <= 17; i++) {
                        validActivities.add(i);
                    }

                    while (true) {
                        try {
                            if (activity.equals("cancel")) {
                                cancelAct = true;
                                break;
                            } else {
                                activityNum = Integer.parseInt(activity);
                                if (validActivities.contains(activityNum)) {
                                    break;
                                } else {
                                    throw new Exception("Perintah tidak ditemukan!");
                                }
                            }

                        } catch (Exception e) {
                            System.out.println(e.getMessage());
                            activity = userInput.nextLine();
                        }
                    }

                    if (activity.equals("cancel")) {
                        System.out.println("Kamu membatalkan aktivitas!");
                    }

                    else {

                        if (activityNum == 1) {
                            System.out.println();
                            System.out.println("Kamu memilih untuk bekerja!");
                            System.out.println("Berikut adalah efek akibat bekerja:");
                            System.out.println("Fullness: -10 / 30 detik");
                            System.out.println("Mood: -10 / 30 detik");
                            System.out.println("Gaji : + sesuai dengan pekerjaan yang dimiliki / 4 menit");
                            System.out.println();
                            System.out.println(
                                    "Berapa lama kamu ingin bekerja? (dalam satuan detik, kelipatan 120, dan tidak boleh lebih dari 240)");
                            String workTime = userInput.nextLine();
                            int workDur = 0;
                            while (true) {
                                try {
                                    if (workTime.equals("cancel")) {
                                        break;
                                    } else {
                                        workDur = Integer.parseInt(workTime);
                                        if (workDur % 120 != 0 || workDur <= 0 || workDur > 240) {
                                            System.out.println(
                                                    "Masukan harus kelipatan 120, dan tidak boleh lebih dari 240!");
                                            workTime = userInput.nextLine();
                                            continue;
                                        }
                                        break;
                                    }
                                } catch (NumberFormatException e) {
                                    System.out.println("Masukan harus dalam bentuk angka! (dalam satuan detik)");
                                    workTime = userInput.nextLine();
                                }
                            }

                            if (workTime.equals("cancel")) {
                                System.out.println();
                                System.out.println("Kamu membatalkan bekerja!");
                                System.out.println();
                                continue;
                            } else {
                                dayThread.resumeThread();
                                menu.getCurrentSim().work(new Time(workDur));
                                dayThread.pauseThread();
                            }

                            if (dayThread.getDailyWorkDuration() > 240) {
                                System.out.println("Kamu sudah bekerja terlalu lama hari ini!");
                            } else {
                                dayThread.setDailyWorkDuration(dayThread.getDailyWorkDuration() + workDur);
                            }

                        } else if (activityNum == 2) {
                            System.out.println();
                            System.out.println("Kamu memilih untuk berolahraga!");
                            System.out.println("Berikut adalah efek akibat berolahraga:");
                            System.out.println("Fullness: -5 / 20 detik");
                            System.out.println("Mood: +10 / 20 detik");
                            System.out.println("Health: +5 / 20 detik");
                            System.out.println();

                            System.out.println(
                                    "Berapa lama kamu ingin berolahraga? (dalam satuan detik, kelipatan 20, ketik \"cancel\" jika ingin membatalkan)");
                            String exerciseTime = userInput.nextLine();
                            int exerciseDur = 0;

                            while (true) {
                                try {
                                    if (exerciseTime.equals("cancel")) {
                                        break;
                                    } else {
                                        exerciseDur = Integer.parseInt(exerciseTime);
                                        if (exerciseDur % 20 != 0 || exerciseDur <= 0) {
                                            System.out.println(
                                                    "Masukan harus kelipatan 20! (dalam satuan detik, ketik \"cancel\" jika ingin membatalkan)");
                                            exerciseTime = userInput.nextLine();
                                            continue;
                                        }
                                        break;
                                    }
                                } catch (NumberFormatException e) {
                                    System.out.println(
                                            "Masukan harus dalam bentuk angka! (dalam satuan detik, ketik \"cancel\" jika ingin membatalkan)");
                                    exerciseTime = userInput.nextLine();
                                }
                            }

                            if (exerciseTime.equals("cancel")) {
                                System.out.println();
                                System.out.println("Kamu membatalkan berolahraga!");
                                System.out.println();
                                continue;
                            } else {
                                dayThread.resumeThread();
                                menu.getCurrentSim().workout(new Time(exerciseDur));
                                dayThread.pauseThread();
                            }

                        } else if (activityNum == 3) {
                            Bed bedValidator = null;
                            Iterator<Object> iter = menu.getCurrentSim().getCurrentRoom().getObjects();
                            while (iter.hasNext()) {
                                Object obj = iter.next();
                                if (obj instanceof Bed) {
                                    bedValidator = (Bed) obj;
                                    break;
                                }
                            }

                            if (bedValidator == null) {
                                // Tidak ada bed di ruangan ini
                                System.out.println("Tidak ada tempat tidur di ruangan ini!");
                            } else {
                                System.out.println();
                                System.out.println("Kamu memilih untuk tidur!");
                                System.out.println();
                                System.out.println("Berikut adalah efek tidur:");
                                System.out.println("Mood: +30 / 4 menit");
                                System.out.println("Health: +20 / 4 menit");
                                System.out.println();

                                System.out.println("Berikut adalah efek tidak tidur:");
                                System.out.println("Mood: -10 / 10 menit");

                                System.out.println(
                                        "Berapa lama kamu ingin tidur? (dalam satuan detik dan lebih dari 3 menit)");
                                String sleepTime = userInput.nextLine();
                                int sleepDur = 0;

                                while (true) {
                                    try {
                                        if (sleepTime.equals("cancel")) {
                                            break;
                                        } else {
                                            sleepDur = Integer.parseInt(sleepTime);
                                            if (sleepDur < 180) {
                                                System.out.println("Masukan harus lebih dari 180 detik (3 menit)!");
                                                sleepTime = userInput.nextLine();
                                                continue;
                                            }
                                            break;
                                        }
                                    } catch (NumberFormatException e) {
                                        System.out.println("Masukan harus dalam bentuk angka! (dalam satuan detik)");
                                        sleepTime = userInput.nextLine();
                                    }
                                }
                                if (sleepTime.equals("cancel")) {
                                    System.out.println();
                                    System.out.println("Kamu membatalkan tidur!");
                                    System.out.println();
                                    continue;
                                } else {
                                    menu.getCurrentSim().goToObject((NonFoodObjects) bedValidator);
                                    dayThread.resumeThread();
                                    bedValidator.sleep(new Time(sleepDur), menu.getCurrentSim());
                                    dayThread.setSlept(true);
                                    dayThread.pauseThread();
                                }
                            }

                        } else if (activityNum == 4) {
                            if (menu.getCurrentSim().getInventory().getFoods().size() == 0) {
                                System.out.println("Kamu tidak memiliki makanan!");
                                continue;
                            } else {
                                TableAndChair tableValidator = null;
                                Iterator<Object> iter = menu.getCurrentSim().getCurrentRoom().getObjects();
                                while (iter.hasNext()) {
                                    Object obj = iter.next();
                                    if (obj instanceof TableAndChair) {
                                        tableValidator = (TableAndChair) obj;
                                        break;
                                    }
                                }
                                if (tableValidator == null) {
                                    // Tidak ada table and chair di ruangan ini
                                    System.out.println("Tidak ada meja dan kursi di ruangan ini!");
                                } else {
                                    System.out.println("Kamu memilih untuk makan!");
                                    menu.getCurrentSim().goToObject(tableValidator);
                                    System.out.println("Berikut daftar makanan yang dapat kamu makan!");
                                    menu.getCurrentSim().getInventory().printFoodList();
                                    System.out.println("Makanan apa yang ingin kamu makan? (ketik 'cancel' jika ingin membatalkan)");
                                    String foodName = userInput.nextLine();
                                    String loweredFood = foodName.toLowerCase().replaceAll("\\s+", "");

                                    ArrayList<String> validFoods = new ArrayList<String>();
                                    for (Food food : menu.getCurrentSim().getInventory().getFoods()) {
                                        validFoods.add(food.getName().toLowerCase().replaceAll("\\s+", ""));
                                    }

                                    boolean cancelEating = false;

                                    while (true) {
                                        try {
                                            if (loweredFood.equals("cancel")) {
                                                cancelEating = true;
                                                break;
                                            } else {
                                                if (!validFoods.contains(loweredFood)) {
                                                    throw new Exception("Makanan tidak ditemukan!");
                                                } else {
                                                    menu.getCurrentSim().getInventory().getFood(loweredFood);
                                                    break;
                                                }
                                            }
                                        } catch (Exception e) {
                                            System.out.println(e.getMessage());
                                            foodName = userInput.nextLine();
                                            loweredFood = foodName.toLowerCase().replaceAll("\\s+", "");
                                        }
                                    }

                                    if (cancelEating) {
                                        System.out.println();
                                        System.out.println("Kamu membatalkan makan!");
                                        System.out.println();
                                        continue;
                                    } else {
                                        dayThread.resumeThread();
                                        if (menu.getCurrentSim().getInventory().getFood(loweredFood).getType()
                                                .equals("Dishes")) {
                                            tableValidator.eat(menu.getCurrentSim(),
                                                    (Dishes) menu.getCurrentSim().getInventory().getFood(loweredFood),
                                                    null);
                                        } else if (menu.getCurrentSim().getInventory().getFood(loweredFood).getType()
                                                .equals("Ingredients")) {
                                            tableValidator.eat(menu.getCurrentSim(), null,
                                                    (Ingredients) menu.getCurrentSim().getInventory().getFood(loweredFood));
                                        }
                                        dayThread.setEaten(true);
                                        dayThread.pauseThread();
                                    }
                                }
                            }
                        } else if (activityNum == 5) {
                            Stove stoveValidator = null;
                            Iterator<Object> itr = menu.getCurrentSim().getCurrentRoom().getObjects();
                            while (itr.hasNext()) {
                                Object obj = itr.next();
                                if (obj instanceof Stove) {
                                    stoveValidator = (Stove) obj;
                                    break;
                                }
                            }

                            if (stoveValidator == null) {
                                System.out.println("Tidak ada kompor di ruangan ini!");
                            } else {
                                menu.getCurrentSim().goToObject((NonFoodObjects) stoveValidator);
                                System.out.println("Kamu memilih untuk memasak!");
                                System.out.println("Berikut daftar makanan yang dapat kamu masak!");
                                Food.printDishes();

                                System.out.println("Makanan apa yang ingin kamu masak?");
                                String dishName = userInput.nextLine();
                                String loweredDish = dishName.toLowerCase().replaceAll("\\s+", "");

                                ArrayList<String> validDishes = new ArrayList<String>();
                                for (String dish : Food.getDishes()) {
                                    validDishes.add(dish.toLowerCase().replaceAll("\\s+", ""));
                                }

                                int dishIndex = 0;
                                for (int i = 0; i < validDishes.size(); i++) {
                                    if (validDishes.get(i).equals(loweredDish)) {
                                        dishIndex = i;
                                        break;
                                    }
                                }
                                Dishes toBeCooked = new Dishes(Food.getDishes().get(dishIndex));
                                boolean cancelCook = false;

                                // TODO TobeChecked again

                                while (true) {
                                    try {
                                        if (loweredDish.equals("cancel")) {
                                            cancelCook = true;
                                            break;
                                        } else {
                                            if (!validDishes.contains(loweredDish)) {
                                                throw new Exception(
                                                        "Makanan tidak ditemukan! (atau ketik 'cancel' untuk membatalkan)");
                                            } else {
                                                for (int i = 0; i < validDishes.size(); i++) {
                                                    if (validDishes.get(i).equals(loweredDish)) {
                                                        dishIndex = i;
                                                        break;
                                                    }
                                                }
                                                toBeCooked = new Dishes(Food.getDishes().get(dishIndex));
                                                if (!toBeCooked.checkIngredients(menu.getCurrentSim())) {
                                                    throw new Exception(
                                                            "Bahan-bahan tidak cukup! (atau ketik 'cancel' untuk membatalkan)");
                                                } else {
                                                    break;
                                                }
                                            }
                                        }
                                    } catch (Exception e) {
                                        System.out.println(e.getMessage());
                                        dishName = userInput.nextLine();
                                        loweredDish = dishName.toLowerCase().replaceAll("\\s+", "");
                                    }
                                }

                                if (!cancelCook) {
                                    dayThread.resumeThread();
                                    stoveValidator.cookDish(menu.getCurrentSim(), toBeCooked);
                                    dayThread.pauseThread();
                                } else {
                                    System.out.println("Pemasakan dibatalkan!");
                                    continue;
                                }
                            }
                        } else if (activityNum == 6) {
                            System.out.println("Kamu memilih untuk berkunjung!");
                            System.out.println();
                            if (world.getHouseList().size() == 1) {
                                System.out.println("Tidak Ada House Yang Dapat Kamu Kunjungi Di World Pada Saat Ini!");
                                System.out.println();
                            } else {
                                System.out.println("Berikut Adalah List House Yang Dapat Kamu Kunjungi:");
                                Iterator<House> itr = world.getHouseList().iterator();
                                House visitHouse = null;
                                System.out.println("[0] Pulang Ke Rumah Sendiri");
                                int i = 1;
                                while (itr.hasNext()) {
                                    House h = itr.next();
                                    if (!menu.getCurrentSim().getName().equals(h.getOwner().getName())) {
                                        System.out.println("[" + i + "]" + " Rumah " + h.getOwner().getName());
                                        i++;
                                    } else {
                                        visitHouse = h;
                                    }
                                }
                                // default visitHouse adalah rumah dari currentSim sendiri
                                System.out.println("Masukkan Rumah Yang Ingin Dikunjungi (dalam angka): ");
                                String choice = userInput.nextLine();
                                int choiceInt;
                                while (true) {
                                    try {
                                        choiceInt = Integer.parseInt(choice);
                                        break;
                                    } catch (NumberFormatException e) {
                                        System.out.println("Masukan harus dalam bentuk angka!");
                                        System.out.println("Masukkan Rumah Yang Ingin Dikunjungi (dalam angka): ");
                                        choice = userInput.nextLine();
                                    }
                                }
                                if (choiceInt == 0) {
                                    dayThread.resumeThread();
                                    menu.getCurrentSim().visit(visitHouse);
                                    System.out.println("Kamu Telah Pulang Ke Rumah Sendiri!");
                                    dayThread.pauseThread();
                                } else {
                                    itr = world.getHouseList().iterator();
                                    i = 1;
                                    boolean isVisit = false;
                                    while (itr.hasNext()) {
                                        House h = itr.next();
                                        if (!menu.getCurrentSim().getName().equals(h.getOwner().getName())) {
                                            if (i == choiceInt) {
                                                visitHouse = h;
                                                isVisit = true;
                                                break;
                                            } else {
                                                i++;
                                            }
                                        }
                                    }
                                    if (!isVisit) {
                                        System.out.println("Rumah Yang Dipilih Untuk Dikunjungi Tidak Ada Dalam List!");
                                        System.out.println();
                                    } else {
                                        if (visitHouse != null) {
                                            dayThread.resumeThread();
                                            menu.getCurrentSim().visit(visitHouse);
                                            System.out.println("Kamu Sekarang Telah Tiba Di Rumah "
                                                    + visitHouse.getOwner().getName());
                                            System.out.println();
                                            dayThread.pauseThread();
                                        }
                                    }
                                }
                            }
                            // TODO visit
                        } else if (activityNum == 7) {
                            Toilet toiletValidator = null;
                            Iterator<Object> itr = menu.getCurrentSim().getCurrentRoom().getObjects();
                            while (itr.hasNext()) {
                                Object obj = itr.next();
                                if (obj instanceof Toilet) {
                                    toiletValidator = (Toilet) obj;
                                    break;
                                }
                            }

                            if (toiletValidator == null) {
                                System.out.println("Tidak ada toilet di ruangan ini!");
                            } else {
                                menu.getCurrentSim().goToObject(toiletValidator);
                                System.out.println("Kamu memilih untuk buang air!");
                                dayThread.resumeThread();
                                toiletValidator.useToilet(menu.getCurrentSim());
                                dayThread.setPoopedAfterAte(true);
                                dayThread.setEaten(false);
                                dayThread.pauseThread();
                            }

                        } else if (activityNum == 8) {
                            System.out.println();
                            System.out.println("Pilihan Update:");
                            System.out.println("[1] Menambah Ruangan");
                            System.out.println("[2] Menambah Object Pada Ruangan Sekarang");
                            System.out.println("[3] Menghapus Object Pada Ruangan Sekarang");
                            System.out.print("Masukkan Pilihan (dalam angka): ");
                            String numUpHouse = userInput.nextLine();
                            int numUpHouseInt;
                            while (true) {
                                try {
                                    numUpHouseInt = Integer.parseInt(numUpHouse);
                                    break;
                                } catch (NumberFormatException e) {
                                    System.out.println("Masukan harus dalam bentuk angka!");
                                    System.out.println("Masukkan pilihan (dalam angka): ");
                                    numUpHouse = userInput.nextLine();
                                }
                            }

                            System.out.println();
                            if (numUpHouseInt == 1) {
                                // TODO add room in side current room
                                if (menu.getCurrentSim().getCurrentRoom().getFront() != null
                                        && menu.getCurrentSim().getCurrentRoom().getRight() != null
                                        && menu.getCurrentSim().getCurrentRoom().getBehind() != null
                                        && menu.getCurrentSim().getCurrentRoom().getLeft() != null) {
                                    System.out.println(
                                            "Tidak Dapat Menambah Ruangan Karena Sudah Ada Ruangan Pada Setip Sisi Ruangan Sekerang");
                                } else {
                                    System.out.println("Arah Ruangan:");
                                    if (menu.getCurrentSim().getCurrentRoom().getFront() == null) {
                                        System.out.println("Front");
                                    }
                                    if (menu.getCurrentSim().getCurrentRoom().getRight() == null) {
                                        System.out.println("Right");
                                    }
                                    if (menu.getCurrentSim().getCurrentRoom().getBehind() == null) {
                                        System.out.println("Behind");
                                    }
                                    if (menu.getCurrentSim().getCurrentRoom().getLeft() == null) {
                                        System.out.println("Left");
                                    }
                                    System.out.println("Pilih Arah Ruangan yang Akan Dibangun: ");
                                    String choice = userInput.nextLine();
                                    System.out.println("Masukkan Nama Ruangan: ");
                                    String roomName = userInput.nextLine();
                                    System.out.println();
                                    menu.getCurrentSim().getCurrentHouse().addRoom(menu.getCurrentSim(),
                                            menu.getCurrentSim().getCurrentRoom(), roomName, choice);
                                }
                            } else if (numUpHouseInt == 2) {
                                if (menu.getCurrentSim().getInventory().getObjects().size() == 0) {
                                    System.out.println("Tidak Ada Object Dalam Inventory Yang Dapat Ditambahkan Pada Ruangan!");
                                } else {
                                    System.out.println("Object Dalam Inventory Yang Dapat Ditambahkan Pada Ruangan:");
                                    int i = 1;
                                    Iterator<Object> itr = menu.getCurrentSim().getInventory().getObjects().iterator();
                                    while (itr.hasNext()) {
                                        Object o = itr.next();
                                        if (o instanceof NonFoodObjects nfo) {
                                            System.out.println("[" + i + "] " + nfo.getType() + " x"
                                                    + menu.getCurrentSim().getInventory()
                                                    .getObjectNum(nfo.getClass().getName()) + " ukuran: " + nfo.getLength() + "x" + nfo.getWidth());
                                            i++;
                                        }
                                    }
                                    System.out.println("Masukkan Angka Object Yang Ingin Ditambahkan Pada Ruangan: ");
                                    String choice = userInput.nextLine();
                                    int choiceInt;
                                    while (true) {
                                        try {
                                            choiceInt = Integer.parseInt(choice);
                                            break;
                                        } catch (NumberFormatException e) {
                                            System.out.println("Masukan harus dalam bentuk angka!");
                                            System.out.println("Masukkan pilihan (dalam angka): ");
                                            choice = userInput.nextLine();
                                        }
                                    }
                                    itr = menu.getCurrentSim().getInventory().getObjects().iterator();
                                    Object objAdd = null;
                                    i = 1;
                                    while (itr.hasNext()) {
                                        Object o = itr.next();
                                        if (o instanceof NonFoodObjects) {
                                            if (i == choiceInt) {
                                                objAdd = o;
                                                break;
                                            } else {
                                                i++;
                                            }
                                        }
                                    }
                                    if (objAdd != null) {
                                        System.out.println();
                                        System.out.println("Kondisi Ruangan");
                                        menu.getCurrentSim().getCurrentRoom().printObjRoom();
                                        System.out.println();
                                        System.out.println("Lokasi Object Pada Ruangan 6x6:");
                                        System.out.print("Masukkan Nilai X: ");
                                        String x = userInput.nextLine();
                                        boolean isCancel = false;
                                        int xInt;
                                        while (true) {
                                            try {
                                                xInt = Integer.parseInt(x);
                                                break;
                                            } catch (NumberFormatException e) {
                                                System.out.println("Masukan harus dalam bentuk angka!");
                                                System.out.print("Masukkan Nilai X: ");
                                                x = userInput.nextLine();
                                            }
                                        }
                                        System.out.print("Masukkan Nilai Y: ");
                                        String y = userInput.nextLine();
                                        int yInt;
                                        while (true) {
                                            try {
                                                yInt = Integer.parseInt(y);
                                                break;
                                            } catch (NumberFormatException e) {
                                                System.out.println("Masukan harus dalam bentuk angka!");
                                                System.out.print("Masukkan Nilai X: ");
                                                y = userInput.nextLine();
                                            }
                                        }
                                        System.out.print("Masukkan Arah Object Pada Ruangan (Vertikal/Horizontal) (ketik 'cancel' untuk membatalkan): ");
                                        String direction = userInput.nextLine();
                                        System.out.println();
                                        int width, length;
                                        if (direction.toLowerCase().replaceAll("\\s+", "").equals("horizontal")) {
                                            width = ((NonFoodObjects) objAdd).getWidth();
                                            length = ((NonFoodObjects) objAdd).getLength();
                                        } else if (direction.toLowerCase().replaceAll("\\s+", "").equals("vertikal")) {
                                            width = ((NonFoodObjects) objAdd).getLength();
                                            length = ((NonFoodObjects) objAdd).getWidth();
                                        } else if (direction.toLowerCase().replaceAll("\\s+", "").equals("cancel")) {
                                            isCancel = true;
                                            width = 0;
                                            length = 0;
                                        } else {
                                            width = 0;
                                            length = 0;
                                        }
                                        while ((!menu.getCurrentSim().getCurrentRoom().availableLoc(new Point(xInt, yInt),
                                                width,
                                                length) || (width == 0 && length == 0)) && !isCancel) {
                                            System.out
                                                    .println("Location Not Available, Please Input Location Object Again!");
                                            System.out.print("Masukkan Nilai X: ");
                                            x = userInput.nextLine();
                                            while (true) {
                                                try {
                                                    xInt = Integer.parseInt(x);
                                                    break;
                                                } catch (NumberFormatException e) {
                                                    System.out.println("Masukan harus dalam bentuk angka!");
                                                    System.out.print("Masukkan Nilai X: ");
                                                    x = userInput.nextLine();
                                                }
                                            }
                                            System.out.print("Masukkan Nilai Y: ");
                                            y = userInput.nextLine();
                                            while (true) {
                                                try {
                                                    yInt = Integer.parseInt(y);
                                                    break;
                                                } catch (NumberFormatException e) {
                                                    System.out.println("Masukan harus dalam bentuk angka!");
                                                    System.out.print("Masukkan Nilai Y: ");
                                                    y = userInput.nextLine();
                                                }
                                            }
                                            System.out.print(
                                                    "Masukkan Arah Object Pada Ruangan (Vertikal/Horizontal) (ketik 'cancel' untuk membatalkan): ");
                                            direction = userInput.nextLine();

                                            while (true) {
                                                try {
                                                    if (direction.toLowerCase().replaceAll("\\s+", "").equals("cancel")) {
                                                        isCancel = true;
                                                        break;
                                                    } else if (direction.equalsIgnoreCase("horizontal")
                                                            || direction.equalsIgnoreCase("vertikal")) {
                                                        break;
                                                    } else {
                                                        throw new Exception(
                                                                "Masukan harus dalam bentuk 'horizontal' atau 'vertikal'!");
                                                    }
                                                } catch (Exception e) {
                                                    System.out.println(e.getMessage());
                                                    System.out.print(
                                                            "Masukkan Arah Object Pada Ruangan (Vertikal/Horizontal): (ketik 'cancel' untuk membatalkan)");
                                                    direction = userInput.nextLine();
                                                }
                                            }
                                            if (direction.equalsIgnoreCase("horizontal")) {
                                                width = ((NonFoodObjects) objAdd).getWidth();
                                                length = ((NonFoodObjects) objAdd).getLength();
                                            } else if (direction.equalsIgnoreCase("vertikal")) {
                                                width = ((NonFoodObjects) objAdd).getLength();
                                                length = ((NonFoodObjects) objAdd).getWidth();
                                            } else {
                                                width = 0;
                                                length = 0;
                                            }
                                            System.out.println();
                                        }
                                        if (!isCancel) {
                                            menu.getCurrentSim().getInventory().removeObject(objAdd.getName());
                                            menu.getCurrentSim().getCurrentRoom().addObject(objAdd, new Point(xInt, yInt),
                                                    direction);
                                            System.out.println("Object Berhasil Ditambahkan Pada Ruangan!");
                                            System.out.println("Kondisi Ruangan Sekarang");
                                            menu.getCurrentSim().getCurrentRoom().printObjRoom();
                                            System.out.println();
                                        } else {
                                            System.out.println("Pemasangan Object Pada Ruangan Dibatalkan!");
                                            System.out.println();
                                        }
                                    } else {
                                        System.out.println("Tidak Ada Object Yang Dapat Ditambahkan Pada Ruangan!");
                                    }
                                }
                            } else if (numUpHouseInt == 3) {
                                // TODO delete object in current room and add to inventory owner
                                Iterator<Object> itr = menu.getCurrentSim().getCurrentRoom().getObjects();
                                System.out.println("Object Pada Ruangan Yang Dapat Dihapus:");
                                int i = 1;
                                while (itr.hasNext()) {
                                    System.out.println("[" + i + "] " + itr.next().getName());
                                    i++;
                                }
                                System.out.print("\nMasukkan Angka Object Yang Ingin Dihapus: ");
                                int choice = userInput.nextInt();
                                i = 1;
                                itr = menu.getCurrentSim().getCurrentRoom().getObjects();
                                Object objRemove = null;
                                while (itr.hasNext()) {
                                    Object o = itr.next();
                                    if (i == choice) {
                                        objRemove = o;
                                        break;
                                    } else {
                                        i++;
                                    }
                                }
                                if (objRemove != null) {
                                    menu.getCurrentSim().getCurrentRoom().removeObject(objRemove,
                                            ((NonFoodObjects) objRemove).getPosition(), menu.getCurrentSim());
                                    System.out.println(
                                            "Object " + objRemove.getName() + " Berhasil Dihapus Dari Ruangan");
                                    System.out.println();
                                } else {
                                    System.out.println("Tidak Ada Object Yang Dihapus");
                                    System.out.println();
                                }
                            } else {
                                System.out.println("Pilihan Input Tidak Tersedia!");
                            }
                        } else if (activityNum == 9) {
                            if (dayThread.getIsBuying()) {
                                System.out.println("Kamu sedang berbelanja, tunggu sampai selesai!");
                                System.out.println();
                            } else {
                                System.out.println();
                                System.out.println("Berikut adalah kategori barang yang bisa kamu beli!");
                                System.out.println("[1] Makanan");
                                System.out.println("[2] Furnitur");

                                System.out.print("Masukkan pilihan (dalam angka): ");
                                String numBuy = userInput.nextLine();
                                int numBuyInt;
                                while (true) {
                                    try {
                                        numBuyInt = Integer.parseInt(numBuy);
                                        if (numBuyInt != 1 && numBuyInt != 2) {
                                            System.out.println("Masukan harus dalam bentuk angka 1 atau 2!");
                                            System.out.print("Masukkan pilihan (dalam angka): ");
                                            numBuy = userInput.nextLine();
                                        } else{
                                            break;
                                        }
                                    } catch (NumberFormatException e) {
                                        System.out.println("Masukan harus dalam bentuk angka!");
                                        System.out.println("Masukkan pilihan (dalam angka): ");
                                        numBuy = userInput.nextLine();
                                    }
                                }

                                ArrayList<String> validObjs = new ArrayList<String>();
                                int objIdx;
                                Object wantedObject = null;
                                boolean isCancel = false;

                                if (numBuyInt == 1) {
                                    System.out.println();
                                    System.out.println("Berikut adalah makanan yang bisa kamu beli!");
                                    Food.printIngredients();
                                    System.out.println();

                                    System.out.println(
                                            "Masukkan nama makanan yang ingin kamu beli: (ketik 'cancel' untuk membatalkan)");

                                    String wantedFood = userInput.nextLine();
                                    String loweredWantedFood = wantedFood.toLowerCase().replaceAll("\\s+", "");
                                    isCancel = false;

                                    for (int i = 0; i < Food.getIngredientList().size(); i++) {
                                        validObjs.add(
                                                Food.getIngredientList().get(i).toLowerCase().replaceAll("\\s+", ""));
                                    }

                                    while (true) {
                                        try {
                                            if (loweredWantedFood.equals("cancel")) {
                                                isCancel = true;
                                                break;
                                            } else {
                                                if (!validObjs.contains(loweredWantedFood)) {
                                                    throw new Exception("Makanan tidak ditemukan!");
                                                } else {
                                                    break;
                                                }
                                            }
                                        } catch (Exception e) {
                                            System.out.println(e.getMessage());
                                            System.out.print("Masukkan nama makanan yang ingin kamu beli: ");
                                            wantedFood = userInput.nextLine();
                                            loweredWantedFood = wantedFood.toLowerCase().replaceAll("\\s+", "");
                                        }
                                    }
                                    objIdx = validObjs.indexOf(loweredWantedFood);
                                    if (!isCancel) {
                                        wantedObject = new Ingredients(Food.getIngredientList().get(objIdx));
                                    }

                                } else if (numBuyInt == 2) {
                                    System.out.println();
                                    System.out.println("Berikut adalah furnitur yang bisa kamu beli!");
                                    Object.printBuyableObjects();
                                    System.out.println();

                                    System.out.println(
                                            "Masukkan nama furnitur yang ingin kamu beli: (ketik 'cancel' untuk membatalkan)");

                                    String wantedFurniture = userInput.nextLine();
                                    String loweredWantedFurniture = wantedFurniture.toLowerCase().replaceAll("\\s+",
                                            "");
                                    isCancel = false;

                                    for (int i = 0; i < Object.getBuyableObjects().size(); i++) {
                                        validObjs.add(Object.getBuyableObjects().get(i).getType().toLowerCase()
                                                .replaceAll("\\s+", ""));
                                    }

                                    while (true) {
                                        try {
                                            if (loweredWantedFurniture.equals("cancel")) {
                                                isCancel = true;
                                                break;
                                            } else {
                                                if (!validObjs.contains(loweredWantedFurniture)) {
                                                    throw new Exception("Furnitur tidak ditemukan!");
                                                } else {
                                                    break;
                                                }
                                            }
                                        } catch (Exception e) {
                                            System.out.println(e.getMessage());
                                            System.out.println(
                                                    "Masukkan nama furnitur yang ingin kamu beli: (ketik 'cancel' untuk membatalkan)");
                                            wantedFurniture = userInput.nextLine();
                                            loweredWantedFurniture = wantedFurniture.toLowerCase().replaceAll("\\s+",
                                                    "");
                                        }
                                    }
                                    objIdx = validObjs.indexOf(loweredWantedFurniture);
                                    if (!isCancel) {
                                        wantedObject = Object.getBuyableObjects().get(objIdx);
                                    }
                                }

                                if (isCancel) {
                                    System.out.println("Pembelian dibatalkan!");
                                    continue;
                                } else {
                                    menu.getCurrentSim().buy(wantedObject);
                                    dayThread.setIsBuying(true);
                                }
                                System.out.println();
                            }
                        } else if (activityNum == 10) {
                            // TODO membaca
                            System.out.println();
                            Book book = null;
                            Iterator<Object> itr = menu.getCurrentSim().getCurrentRoom().getObjects();
                            while (itr.hasNext()) {
                                Object o = itr.next();
                                if (o instanceof Book) {
                                    book = (Book) o;
                                    break;
                                }
                            }

                            if (book == null) {
                                System.out.println("Tidak ada buku di ruangan ini!");
                            } else {
                                System.out.println("Berapa lama kamu akan membaca buku?");
                                System.out.println("Masukkan waktu dalam detik (dalam angka dan lebih dari 1 menit): ");
                                String time = userInput.nextLine();
                                int timeInt;
                                try {
                                    timeInt = Integer.parseInt(time);
                                    if (timeInt < 60) {
                                        System.out.println("Waktu membaca minimal 1 menit!");
                                        System.out.println("Masukkan waktu dalam detik (dalam angka): ");
                                        time = userInput.nextLine();
                                        timeInt = Integer.parseInt(time);
                                    }
                                } catch (NumberFormatException e) {
                                    System.out.println("Masukan harus dalam bentuk angka!");
                                    System.out.println("Masukkan waktu dalam detik (dalam angka): ");
                                    time = userInput.nextLine();
                                    timeInt = Integer.parseInt(time);
                                }
                                dayThread.resumeThread();
                                book.read(new Time(timeInt), menu.getCurrentSim(), book);
                                dayThread.pauseThread();
                            }

                        } else if (activityNum == 11) {
                            // TODO menulis
                            System.out.println();
                            Journal journal = null;
                            Iterator<Object> itr = menu.getCurrentSim().getCurrentRoom().getObjects();

                            while (itr.hasNext()) {
                                Object o = itr.next();
                                if (o instanceof Journal) {
                                    journal = (Journal) o;
                                    break;
                                }
                            }

                            if (journal == null) {
                                System.out.println("Tidak ada jurnal di ruangan ini!");
                            } else {
                                System.out.println("Apa yang ingin kamu tuliskan ke dalam jurnal?");
                                String text = userInput.nextLine();
                                dayThread.resumeThread();
                                journal.writeJournal(journal, menu.getCurrentSim(), text);
                                dayThread.pauseThread();
                            }

                        } else if (activityNum == 12) {
                            // TODO mendengarkan musik
                            AudioPlayer audioplayer = null;
                            Iterator<Object> itr = menu.getCurrentSim().getCurrentRoom().getObjects();

                            while (itr.hasNext()) {
                                Object o = itr.next();
                                if (o instanceof AudioPlayer) {
                                    audioplayer = (AudioPlayer) o;
                                    break;
                                }
                            }

                            if (audioplayer == null) {
                                System.out.println("Tidak ada audio player di ruangan ini!");
                            } else {
                                userInput.close();
                                dayThread.resumeThread();
                                audioplayer.audioPlayerMenu(menu.getCurrentSim());
                                dayThread.pauseThread();
                                userInput = new Scanner(System.in);
                            }

                        } else if (activityNum == 13) {
                            // TODO menonton TV
                            TV tv = null;
                            Iterator<Object> itr = menu.getCurrentSim().getCurrentRoom().getObjects();

                            while (itr.hasNext()) {
                                Object o = itr.next();
                                if (o instanceof TV) {
                                    tv = (TV) o;
                                    break;
                                }
                            }
                            if (tv == null) {
                                System.out.println("Tidak ada TV di ruangan ini!");
                            } else {
                                dayThread.resumeThread();
                                tv.watchTV(new Time(60),menu.getCurrentSim(), new Channel("sportChannel", 1,"Sports"));
                                dayThread.pauseThread();
                            }
                        } else if (activityNum == 14) {
                            // TODO bermain piano
                            Piano piano = null;

                            Iterator<Object> itr = menu.getCurrentSim().getCurrentRoom().getObjects();

                            while (itr.hasNext()) {
                                Object o = itr.next();
                                if (o instanceof Piano) {
                                    piano = (Piano) o;
                                    break;
                                }
                            }

                            if (piano == null) {
                                System.out.println("Tidak ada piano di ruangan ini!");
                            } else {
                                System.out.println("Berapa lama kamu akan bermain piano?");
                                System.out.println("Masukkan waktu dalam detik (dalam angka dan lebih dari 1 menit): ");
                                String time = userInput.nextLine();
                                int timeInt;

                                while (true) {
                                    try {
                                        timeInt = Integer.parseInt(time);
                                        if (timeInt < 60) {
                                            throw new Exception("Waktu membaca minimal 1 menit!");
                                        }
                                        break;
                                    } catch (Exception e) {
                                        System.out.println("Masukan harus dalam bentuk angka dan minimal 1 menit!");
                                        System.out.println("Masukkan waktu dalam detik (dalam angka): ");
                                        time = userInput.nextLine();
                                    }
                                }
                                dayThread.resumeThread();
                                piano.playPiano(new Time(timeInt), menu.getCurrentSim());
                                dayThread.pauseThread();
                            }

                        } else if (activityNum == 15) {
                            // TODO bermain game
                            GameStation gamestation = null;

                            Iterator<Object> itr = menu.getCurrentSim().getCurrentRoom().getObjects();

                            while (itr.hasNext()) {
                                Object o = itr.next();
                                if (o instanceof GameStation) {
                                    gamestation = (GameStation) o;
                                    break;
                                }
                            }

                            if (gamestation == null) {
                                System.out.println("Tidak ada game station di ruangan ini!");
                            } else {
                                System.out.println("Berikut adalah daftar game yang tersedia: ");
                                gamestation.displayGameList();
                                System.out.println(
                                        "\nMasukkan nama game yang ingin kamu mainkan: (ketik 'cancel' untuk keluar)");
                                String gameName = userInput.nextLine();

                                ArrayList<String> validGames = new ArrayList<>();

                                for (int i = 0; i < GameStation.getGames().size(); i++) {
                                    validGames.add(GameStation.getGames().get(i).getName().toLowerCase()
                                            .replaceAll("\\s+", ""));
                                }

                                while (true) {
                                    try {
                                        if (gameName.equals("cancel")) {
                                            break;
                                        } else if (!validGames
                                                .contains(gameName.toLowerCase().replaceAll("\\s+", ""))) {
                                            throw new Exception("Game tidak tersedia!");
                                        } else {
                                            break;
                                        }
                                    } catch (Exception e) {
                                        System.out.println(e.getMessage());
                                        System.out.println(
                                                "Masukkan nama game yang ingin kamu mainkan: (ketik 'cancel' untuk keluar)");
                                        gameName = userInput.nextLine();
                                    }
                                }

                                int gameIndex = -1;
                                if (gameName.equals("cancel")) {
                                    continue;
                                } else {
                                    for (int i = 0; i < GameStation.getGames().size(); i++) {
                                        if (GameStation.getGames().get(i).getName().toLowerCase().replaceAll("\\s+", "").equals(gameName.toLowerCase().replaceAll("\\s+", ""))) {
                                            gameIndex = i;
                                            break;
                                        }
                                    }

                                    Game game = GameStation.getGames().get(gameIndex);
                                    dayThread.resumeThread();
                                    gamestation.playGame(game, menu.getCurrentSim());
                                    dayThread.pauseThread();
                                }
                            }
                        } else if (activityNum == 16) {
                            System.out.println();
                            Journal journal = null;
                            Iterator<Object> itr = menu.getCurrentSim().getCurrentRoom().getObjects();

                            while (itr.hasNext()) {
                                Object o = itr.next();
                                if (o instanceof Journal) {
                                    journal = (Journal) o;
                                    break;
                                }
                            }

                            if (journal == null) {
                                System.out.println("Tidak ada jurnal di ruangan ini!");
                            } else {
                                if (journal.getNumOfPages() == 0) {
                                    System.out.println("Jurnal kosong!");
                                    continue;
                                } else {
                                    System.out.println("Jurnal kamu berisi " + journal.getNumOfPages() + " halaman.");
                                    System.out.println("Halaman berapa yang ingin kamu baca?");
                                    System.out.println("Masukkan angka ('cancel' jika ingin membatalkan): ");
                                    String page = userInput.nextLine();
                                    int pageInt = 0;

                                    while (true) {
                                        try {
                                            if (page.toLowerCase().replaceAll("\\s+", "").equals("cancel")) {
                                                break;
                                            } else {
                                                pageInt = Integer.parseInt(page);
                                                if (pageInt < 1 || pageInt > journal.getNumOfPages()) {
                                                    throw new Exception("Halaman tidak tersedia!");
                                                }
                                                break;
                                            }
                                        } catch (Exception e) {
                                            System.out.println(e.getMessage());
                                            System.out.println("Masukkan angka: ");
                                            page = userInput.nextLine();
                                        }
                                    }
                                    if (page.toLowerCase().replaceAll("\\s+", "").equals("cancel")) {
                                        continue;
                                    } else {
                                        dayThread.resumeThread();
                                        journal.readJournal(journal, menu.getCurrentSim(), pageInt);
                                        dayThread.pauseThread();
                                    }
                                }
                            }
                        } else if (activityNum == 17) {
                            System.out.println();
                            Toilet toiletVal = null;
                            Iterator<Object> itr = menu.getCurrentSim().getCurrentRoom().getObjects();

                            while (itr.hasNext()) {
                                Object o = itr.next();
                                if (o instanceof Toilet) {
                                    toiletVal = (Toilet) o;
                                    break;
                                }
                            }

                            if (toiletVal == null) {
                                System.out.println("Tidak ada toilet di ruangan ini!");
                            } else {
                                System.out.println("Membersihkan toilet akan memakan waktu selama 2 menit");
                                System.out.println("Berikut adalah efek dari membersihkan toilet:");
                                System.out.println("Mood: +20 / aksi");
                                System.out.println("Fullness: -20 / 60 detik");
                                System.out.print("Apakah ingin tetap membersihkan toilet (Y/N): ");
                                String choice = userInput.nextLine();
                                boolean isCleaning = false;
                                while (true) {
                                    if (choice.equalsIgnoreCase("y")) {
                                        isCleaning = true;
                                        break;
                                    } else if (choice.equalsIgnoreCase("n")) {
                                        isCleaning = false;
                                        break;
                                    } else {
                                        System.out.println("Input Tidak Valid! Masukan Y atau N saja!");
                                        System.out.print("Apakah ingin tetap membersihkan toilet (Y/N): ");
                                        choice = userInput.nextLine();
                                    }
                                }
                                if (isCleaning) {
                                    //TODO Cleaning Toilet
                                    dayThread.resumeThread();
                                    toiletVal.cleanToilet(menu.getCurrentSim());
                                    dayThread.pauseThread();
                                } else {
                                    System.out.println("Aksi membersihkan toilet telah dibatalkan");
                                }
                                System.out.println();
                            }
                        }
                    }
                } else if (commandNum == 9) {
                    Clock clockCheck = null;

                    Iterator<Object> itr = menu.getCurrentSim().getCurrentRoom().getObjects();

                    while (itr.hasNext()) {
                        Object o = itr.next();
                        if (o instanceof Clock) {
                            clockCheck = (Clock) o;
                            break;
                        }
                    }

                    if (clockCheck == null) {
                        System.out.println("Tidak ada jam di ruangan ini!");
                    } else {
                        System.out.println();
                        Clock.use();
                    }

                } else if (commandNum == 10) {
                    System.out.println();
                    System.out.println("Daftar Ruangan:");
                    menu.getCurrentSim().getCurrentHouse().printRooms();
                    System.out.println();
                    System.out.println("Ruangan mana yang ingin kamu tuju? (Masukkan nama ruangan)");
                    String roomName = userInput.nextLine();
                    String loweredRoomName = roomName.toLowerCase().replaceAll("\\s+", "");
                    ArrayList<String> validRooms = new ArrayList<String>();
                    Iterator<Room> itr = menu.getCurrentSim().getCurrentHouse().getRooms();
                    while (itr.hasNext()) {
                        validRooms.add(itr.next().getNameRoom().toLowerCase().replaceAll("\\s+", ""));
                    }
                    while (!validRooms.contains(loweredRoomName)) {
                        System.out.println("Masukkan ruangan yang valid!");
                        roomName = userInput.nextLine();
                        loweredRoomName = roomName.toLowerCase().replaceAll("\\s+", "");
                    }
                    Room targetedRoom = null;
                    itr = menu.getCurrentSim().getCurrentHouse().getRooms();

                    while (itr.hasNext()) {
                        Room r = itr.next();
                        if (r.getNameRoom().toLowerCase().replaceAll("\\s+", "").equals(loweredRoomName)) {
                            targetedRoom = r;
                            System.out.println("Kamu berada di " + targetedRoom.getNameRoom() + "!");
                            break;
                        }
                    }
                    menu.getCurrentSim().move(targetedRoom);
                }

                else if (commandNum == 11) {
                    System.out.println();
                    menu.getCurrentSim().getInventory().printInventory();
                    System.out.println();
                }

                else if (commandNum == 12) {
                    menu.exit();
                    break;
                }

                else {
                    System.out.println("Perintah tidak dikenali!");
                    System.out.println();
                }

                if (!menu.getCurrentSim().isAlive()) {
                    System.out.println();

                    ArrayList<String> changeList = new ArrayList<String>();
                    for (Sim sim : menu.getSimList()) {
                        if (sim.isAlive()) {
                            changeList.add(sim.getName().toLowerCase().replaceAll("\\s+", ""));
                        }
                    }

                    if (changeList.size() == 0) {
                        System.out.println("Semua sims telah mati!");
                        System.out.println("Terima kasih telah bermain!");
                        System.exit(0);
                    }
                    else {
                        System.out.println("Silahkan memilih sims");

                        System.out.println("Masukkan nama sim: ");
                        String simChoice = userInput.nextLine();
                        while (true) {
                            try {
                                if (!changeList.contains(simChoice.toLowerCase().replaceAll("\\s+", ""))) {
                                    throw new Exception("Sim tidak ditemukan!");
                                } else {
                                    break;
                                }
                            } catch (Exception e) {
                                System.out.println(e.getMessage());
                                System.out.println("Masukkan nama sim: ");
                                simChoice = userInput.nextLine();
                            }
                        }
                        menu.changeSim(menu.getSimList().get(changeList.indexOf(simChoice.toLowerCase().replaceAll("\\s+", ""))).getName());
                    }
                }
                menu.viewSimInfo();
                System.out.println();
            }
            System.exit(0);
        } else {
            System.out.println("Terima kasih telah bermain!");
            System.exit(0);
        }
    }
}
