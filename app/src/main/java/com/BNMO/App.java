
/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.BNMO;

import java.util.Scanner;
import java.util.concurrent.atomic.AtomicBoolean;
import java.util.concurrent.atomic.AtomicInteger;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.NoSuchElementException;

import com.BNMO.Object.Object;
import com.BNMO.Object.NonFoodObjects.NonFoodObjects;
import com.BNMO.Object.NonFoodObjects.AudioPlayer.AudioPlayer;
import com.BNMO.Object.NonFoodObjects.TV.TV;
import com.BNMO.Object.NonFoodObjects.TableAndChair.TableAndChair;
import com.BNMO.Object.NonFoodObjects.Toilet.Toilet;
import com.BNMO.Object.NonFoodObjects.Book.Book;
import com.BNMO.Object.NonFoodObjects.Bed.*;
import com.BNMO.Object.NonFoodObjects.Piano.Piano;
import com.BNMO.Object.NonFoodObjects.Stove.*;
import com.BNMO.Buildings.*;
import com.BNMO.Object.Food.*;

import com.BNMO.Utilities.*;
import com.BNMO.SIMS.Sim;

public class App {
    public static void main(String[] args) {
        AtomicInteger dailyWorkDuration = new AtomicInteger(0);
        AtomicInteger dailySleptDur = new AtomicInteger(0);
        AtomicBoolean notEnoughSleep = new AtomicBoolean(false);
        Thread timeThread = new Thread(new Runnable() {

            @Override
            public void run() {
                int i = 1;
                while (true) {
                    dailyWorkDuration.set(0);
                    dailySleptDur.set(0);
                    try {
                        System.out.println("Hari ke-" + i + " telah dimulai!");
                        System.out.println();
                        Thread.sleep(360000);
                        System.out.println();
                        System.out.println("Telah berlalu setengah hari!");
                        System.out.println();
                        Thread.sleep(300000);
                        System.out.println();
                        System.out.println("Hari ini tersisa 1 menit dalam waktu nyata!");
                        System.out.println();
                        Thread.sleep(60000);
                        System.out.println();
                        System.out.println("Hari telah berganti!");
                        System.out.println();

                        if (dailySleptDur.get() < 180) {
                            notEnoughSleep.set(true);
                            System.out.println("Kamu tidak cukup tidur!");
                            System.out.println();

                        }
                        i++;
                    } catch (InterruptedException e) {
                        e.printStackTrace();
                    }
                }
            }
        });

        Scanner userInput = new Scanner(System.in);
        System.out.println("Selamat Datang di Sim-Plicity!");
        System.out.print("Apakah kamu ingin memulai permainan? (Y/N) ");
        String startGame = userInput.nextLine();
        System.out.println();

        while (!startGame.equals("Y") && !startGame.equals("N")) {
            System.out.println("Masukkan Y atau N!");
            System.out.print("Apakah kamu ingin memulai permainan? (Y/N) ");
            startGame = userInput.nextLine();
            System.out.println();
        }

        if (startGame.equals("Y")) {
            System.out.println("Masukkan nama sim: ");
            String simName = userInput.nextLine();
            Sim initSim = new Sim(simName);
            Menu menu = new Menu(initSim);
            System.out.println();
            menu.start();

            World world = new World(initSim);

            System.out.println();
            menu.viewSimInfo();
            System.out.println();

            while (menu.isGameStarted()) {
                System.out.println("Apa yang ingin kamu lakukan?");
                System.out.println("[1] Help");
                System.out.println("[2] Lihat info sim");
                System.out.println("[3] Lihat info ruangan");
                System.out.println("[4] Melihat Map");
                System.out.println("[5] Menambah SIMS");
                System.out.println("[6] Mengganti SIMS");
                System.out.println("[7] Mengganti pekerjaan");
                System.out.println("[8] Melakukan aktivitas");
                System.out.println("[9] Melihat waktu");
                System.out.println("[10] Berpindah ruangan");
                System.out.println("[11] Melihat inventory");
                System.out.println("[12] Exit");
                System.out.println();

                System.out.println("Masukkan perintah: (dalam angka)");
                String command;
                try {
                    command = userInput.nextLine();
                } catch (NoSuchElementException e) {
                    userInput.close();
                    userInput = new Scanner(System.in);
                    command = userInput.nextLine();
                }

                int commandNum;
                try {
                    commandNum = Integer.parseInt(command);
                } catch (NumberFormatException e) {
                    System.out.println("Masukan harus dalam bentuk angka!");
                    command = userInput.nextLine();
                    commandNum = Integer.parseInt(command);
                }

                ArrayList<Integer> validCommands = new ArrayList<Integer>();
                for (int i = 1; i <= 12; i++) {
                    validCommands.add(i);
                }

                while (!validCommands.contains(commandNum)) {
                    System.out.println("Masukkan perintah yang valid!");
                    System.out.println("Masukkan perintah: (dalam angka)");
                    command = userInput.nextLine();
                    commandNum = Integer.parseInt(command);
                }

                if (commandNum == 1) {
                    // HELP
                    System.out.println();
                    System.out.println("Kamu memanggil help!");
                    menu.help();
                    System.out.println();
                } else if (commandNum == 2) {
                    // INFO SIM
                    System.out.println();
                    System.out.println("Berikut adalah info sim kamu:");
                    menu.viewSimInfo();
                    System.out.println();
                } else if (commandNum == 3) {
                    // INFO RUMAH
                    System.out.println();
                    System.out.println("Berikut adalah info ruangan kamu:");
                    menu.getCurrentSim().getCurrentHouse().printRooms();
                    // TODO CLI layout
                    world.printHouseLayout(menu.getCurrentSim().getCurrentHouse());
                    System.out.println();
                } else if (commandNum == 4) {
                    // MAP
                    System.out.println();
                    System.out.println("Berikut adalah Map:");
                    // TODO info dunia + layout
                    world.printMap();
                } else if (commandNum == 5) {
                    // Create New SIM
                    System.out.println();
                    System.out.println("Masukkan nama sim yang ingin kamu tambahkan: ");
                    String newSimName = userInput.nextLine();
                    menu.addSim(new Sim(newSimName));
                    menu.viewSimList();
                    System.out.println();
                } else if (commandNum == 6) {
                    // Change SIM
                    System.out.println();
                    System.out.println("Masukkan nama sim yang ingin kamu mainkan: ");
                    String wantedSim = userInput.nextLine();
                    menu.changeSim(wantedSim);
                    System.out.println();
                } else if (commandNum == 7) {
                    // TODO ganti pekerjaan
                } else if (commandNum == 8) {
                    System.out.println();
                    System.out.println("Berikut adalah aktivitas-aktivitas yang bisa kamu lakukan!");
                    System.out.println("[1] Kerja");
                    System.out.println("[2] Olahraga");
                    System.out.println("[3] Tidur");
                    System.out.println("[4] Makan");
                    System.out.println("[5] Memasak");
                    System.out.println("[6] Berkunjung");
                    System.out.println("[7] Buang air");
                    System.out.println("[8] Upgrade rumah");
                    System.out.println("[9] Membeli barang");
                    System.out.println("[10] Membaca");
                    System.out.println("[11] Menulis");
                    System.out.println("[12] Mendengarkan musik");
                    System.out.println("[13] Menonton TV");
                    System.out.println("[14] Bermain piano");
                    System.out.println("[15] Bermain game");
                    System.out.println("[16] Buang air");
                    System.out.println("[17] Tidur");
                    System.out.println();

                    System.out.println("Masukkan perintah: (dalam angka)");
                    String activity = userInput.nextLine();
                    int activityNum;
                    while (true) {
                        try {
                            activityNum = Integer.parseInt(activity);
                            break;
                        } catch (NumberFormatException e) {
                            System.out.println("Masukan harus dalam bentuk angka!");
                            activity = userInput.nextLine();
                        }
                    }
                    ArrayList<Integer> validActivities = new ArrayList<Integer>();
                    for (int i = 1; i <= 11; i++) {
                        validActivities.add(i);
                    }

                    while (!validActivities.contains(activityNum)) {
                        System.out.println("Masukkan angka yang valid!");
                        activity = userInput.nextLine();
                        while (true) {
                            try {
                                activityNum = Integer.parseInt(activity);
                                break;
                            } catch (NumberFormatException e) {
                                System.out.println("Masukan harus dalam bentuk angka!");
                                activity = userInput.nextLine();
                            }
                        }
                    }

                    if (activityNum == 1) {
                        System.out.println();
                        System.out.println("Kamu memilih untuk bekerja!");
                        System.out.println("Berikut adalah efek akibat bekerja:");
                        System.out.println("Fullness: -10 / 30 detik");
                        System.out.println("Mood: -10 / 30 detik");
                        System.out.println("Gaji : + sesuai dengan pekerjaan yang dimiliki / 4 menit");
                        System.out.println();
                        System.out.println(
                                "Berapa lama kamu ingin bekerja? (dalam satuan detik, kelipatan 120, dan tidak boleh lebih dari 240)");
                        String workTime = userInput.nextLine();
                        int workDur;
                        while (true) {
                            try {
                                workDur = Integer.parseInt(workTime);
                                if (workDur % 120 != 0 || workDur <= 0 || workDur > 240) {
                                    System.out.println("Masukan harus kelipatan 120, dan tidak boleh lebih dari 240!");
                                    workTime = userInput.nextLine();
                                    continue;
                                    // TODO cek apakah akan memvalidasi dengan benar
                                }
                                break;
                            } catch (NumberFormatException e) {
                                System.out.println("Masukan harus dalam bentuk angka! (dalam satuan detik)");
                                workTime = userInput.nextLine();
                            }
                        }
                        timeThread.start();
                        menu.getCurrentSim().work(new Time(workDur));

                        if (workDur < 240) {
                            dailyWorkDuration.set(dailyWorkDuration.get() + workDur);
                        }

                    } else if (activityNum == 2) {
                        System.out.println();
                        System.out.println("Kamu memilih untuk berolahraga!");
                        System.out.println("Berikut adalah efek akibat berolahraga:");
                        System.out.println("Fullness: -5 / 20 detik");
                        System.out.println("Mood: +10 / 20 detik");
                        System.out.println("Health: +5 / 20 detik");
                        System.out.println();

                        System.out.println(
                                "Berapa lama kamu ingin berolahraga? (dalam satuan detik, kelipatan 20)");
                        String exerciseTime = userInput.nextLine();
                        int exerciseDur;

                        while (true) {
                            try {
                                exerciseDur = Integer.parseInt(exerciseTime);
                                if (exerciseDur % 20 != 0 || exerciseDur <= 0) {
                                    System.out.println("Masukan harus kelipatan 20!");
                                    exerciseTime = userInput.nextLine();
                                    continue;
                                }
                                break;
                            } catch (NumberFormatException e) {
                                System.out.println("Masukan harus dalam bentuk angka! (dalam satuan detik)");
                                exerciseTime = userInput.nextLine();
                            }
                        }

                        timeThread.start();
                        menu.getCurrentSim().workout(new Time(exerciseDur));
                    } else if (activityNum == 3) {
                        Bed bedValidator = null;
                        while (menu.getCurrentSim().getCurrentRoom().getObjects().hasNext()) {
                            if (menu.getCurrentSim().getCurrentRoom().getObjects().next() instanceof Bed) {
                                bedValidator = (Bed) menu.getCurrentSim().getCurrentRoom().getObjects().next();
                                break;
                            }
                        }

                        if (bedValidator == null) {
                            // Tidak ada bed di ruangan ini
                            System.out.println("Tidak ada tempat tidur di ruangan ini!");
                        } else {
                            System.out.println();
                            System.out.println("Kamu memilih untuk tidur!");
                            System.out.println();
                            System.out.println("Berikut adalah efek tidur:");
                            System.out.println("Mood: +30 / 4 menit");
                            System.out.println("Health: +20 / 4 menit");
                            System.out.println();

                            System.out.println("Berikut adalah efek tidak tidur:");
                            System.out.println("Mood: -10 / 10 menit");

                            System.out.println("Berapa lama kamu ingin tidur? (dalam satuan detik)");
                            String sleepTime = userInput.nextLine();
                            int sleepDur;

                            while (true) {
                                try {
                                    sleepDur = Integer.parseInt(sleepTime);
                                    if (sleepDur <= 180) {
                                        System.out.println("Masukan harus lebih dari 180 detik (d3 menit)!");
                                        sleepTime = userInput.nextLine();
                                        continue;
                                    }
                                    break;
                                } catch (NumberFormatException e) {
                                    System.out.println("Masukan harus dalam bentuk angka! (dalam satuan detik)");
                                    sleepTime = userInput.nextLine();
                                }
                            }
                            menu.getCurrentSim().goToObject((NonFoodObjects) bedValidator);
                            dailySleptDur.set(dailySleptDur.get() + sleepDur);
                            timeThread.start();
                            bedValidator.sleep(new Time(sleepDur), menu.getCurrentSim());
                        }

                    } else if (activityNum == 4) {
                        TableAndChair tableValidator = null;
                        while (menu.getCurrentSim().getCurrentRoom().getObjects().hasNext()) {
                            if (menu.getCurrentSim().getCurrentRoom().getObjects().next() instanceof TableAndChair) {
                                tableValidator = (TableAndChair) menu.getCurrentSim().getCurrentRoom().getObjects()
                                        .next();
                                break;
                            }
                        }
                        if (tableValidator == null) {
                            // Tidak ada table and chair di ruangan ini
                            System.out.println("Tidak ada meja dan kursi di ruangan ini!");
                        } else {
                            System.out.println("Kamu memilih untuk makan!");
                            menu.getCurrentSim().goToObject((NonFoodObjects) tableValidator);
                            System.out.println("Berikut daftar makanan yang dapat kamu makan!");
                            menu.getCurrentSim().getInventory().printFoodList();
                            System.out.println("Makanan apa yang ingin kamu makan?");
                            String foodName = userInput.nextLine();
                            String loweredFood = foodName.toLowerCase();

                            ArrayList<String> validFoods = new ArrayList<String>();
                            for (Food food : menu.getCurrentSim().getInventory().getFoods()) {
                                validFoods.add(food.getName().toLowerCase());
                            }

                            while (!validFoods.contains(loweredFood)) {
                                System.out.println("Masukkan makanan yang valid!");
                                foodName = userInput.nextLine();
                                loweredFood = foodName.toLowerCase();
                            }

                            if (menu.getCurrentSim().getInventory().getFood(loweredFood).getType().equals("Dishes")) {
                                timeThread.start();
                                tableValidator.eatDish(menu.getCurrentSim(),
                                        (Dishes) menu.getCurrentSim().getInventory().getFood(loweredFood));
                            }

                            else if (menu.getCurrentSim().getInventory().getFood(loweredFood).getType()
                                    .equals("Ingredients")) {
                                timeThread.start();
                                tableValidator
                                        .eatIngredients(menu.getCurrentSim(),
                                                (Ingredients) menu.getCurrentSim().getInventory().getFood(loweredFood));
                            }
                        }
                    } else if (activityNum == 5) {
                        Stove stoveValidator = null;
                        while (menu.getCurrentSim().getCurrentRoom().getObjects().hasNext()) {
                            if (menu.getCurrentSim().getCurrentRoom().getObjects().next() instanceof Stove) {
                                stoveValidator = (Stove) menu.getCurrentSim().getCurrentRoom().getObjects().next();
                                break;
                            }
                        }

                        if (stoveValidator == null) {
                            System.out.println("Tidak ada kompor di ruangan ini!");
                        }

                        else {
                            menu.getCurrentSim().goToObject((NonFoodObjects) stoveValidator);
                            System.out.println("Kamu memilih untuk memasak!");
                            System.out.println("Berikut daftar makanan yang dapat kamu masak!");
                            Food.printDishes();

                            System.out.println("Makanan apa yang ingin kamu masak?");
                            String dishName = userInput.nextLine();
                            String loweredDish = dishName.toLowerCase().replaceAll("\\s+", "");

                            ArrayList<String> validDishes = new ArrayList<String>();
                            for (String dish : Food.getDishes()) {
                                validDishes.add(dish.toLowerCase().replaceAll("\\s+", ""));
                            }
                            while (!validDishes.contains(loweredDish)) {
                                System.out.println("Masukkan makanan yang valid!");
                                dishName = userInput.nextLine();
                                loweredDish = dishName.toLowerCase().replaceAll("\\s+", "");
                            }

                            int dishIndex = 0;
                            for (int i = 0; i < validDishes.size(); i++) {
                                if (validDishes.get(i).equals(loweredDish)) {
                                    dishIndex = i;
                                    break;
                                }
                            }
                            Dishes toBeCooked = new Dishes(Food.getDishes().get(dishIndex));
                            boolean cancelCook = false;

                            // TODO TobeChecked again
                            do {
                                while (!validDishes.contains(loweredDish) && !cancelCook) {
                                    System.out.println("Masukkan makanan yang valid!");
                                    dishName = userInput.nextLine();
                                    loweredDish = dishName.toLowerCase().replaceAll("\\s+", "");
                                }
                                for (int i = 0; i < validDishes.size(); i++) {
                                    if (validDishes.get(i).equals(loweredDish)) {
                                        dishIndex = i;
                                        break;
                                    }
                                }
                                System.out.println("Bahan-bahan tidak cukup!");
                                System.out.println("Masukkan makanan lainnya atau ketik 'cancel' untuk membatalkan!");
                                dishName = userInput.nextLine();
                                loweredDish = dishName.toLowerCase().replaceAll("\\s+", "");
                                if (loweredDish.equals("cancel")) {
                                    cancelCook = true;
                                    break;
                                } else {
                                    toBeCooked = new Dishes(Food.getDishes().get(dishIndex));
                                }
                            } while (!toBeCooked.checkIngredients(menu.getCurrentSim()) && !cancelCook);

                            if (!cancelCook) {
                                timeThread.start();
                                stoveValidator.cookDish(menu.getCurrentSim(), toBeCooked);
                            } else {
                                System.out.println("Pemasakan dibatalkan!");
                            }
                        }
                    } else if (activityNum == 6) {
                        System.out.println("Kamu memilih untuk berkunjung!");
                        // TODO visit
                    } else if (activityNum == 7) {
                        System.out.println("Kamu memilih untuk buang air!");
                    } else if (activityNum == 8) {
                        System.out.println();
                        System.out.println("Pilihan Update:");
                        System.out.println("[1] Menambah Ruangan");
                        System.out.println("[2] Menghapus Ruangan Sekarang");
                        System.out.println("[3] Menambah Object Pada Ruangan Sekarang");
                        System.out.println("[4] Menghapus Object Pada Ruangan Sekarang");
                        System.out.print("Masukkan Pilihan (dalam angka): ");
                        String numUpHouse = userInput.nextLine();
                        int numUpHouseInt;
                        while (true) {
                            try {
                                numUpHouseInt = Integer.parseInt(numUpHouse);
                                break;
                            } catch (NumberFormatException e) {
                                System.out.println("Masukan harus dalam bentuk angka!");
                                System.out.println("Masukkan pilihan (dalam angka): ");
                                numUpHouse = userInput.nextLine();
                            }
                        }

                        System.out.println();
                        if (numUpHouseInt == 1) {
                            // TODO add room in side current room
                            if (menu.getCurrentSim().getCurrentRoom().getFront() != null
                                    && menu.getCurrentSim().getCurrentRoom().getRight() != null
                                    && menu.getCurrentSim().getCurrentRoom().getBehind() != null
                                    && menu.getCurrentSim().getCurrentRoom().getLeft() != null) {
                                System.out.println(
                                        "Tidak Dapat Menambah Ruangan Karena Sudah Ada Ruangan Pada Setip Sisi Ruangan Sekerang");
                            } 
                            else {
                                System.out.println("Arah Ruangan:");
                                if (menu.getCurrentSim().getCurrentRoom().getFront() == null)
                                    System.out.println("Front");
                                if (menu.getCurrentSim().getCurrentRoom().getRight() == null)
                                    System.out.println("Right");
                                if (menu.getCurrentSim().getCurrentRoom().getBehind() == null)
                                    System.out.println("Behind");
                                if (menu.getCurrentSim().getCurrentRoom().getLeft() == null)
                                    System.out.println("Left");
                                System.out.println("Pilih Arah Ruangan yang Akan Dibangun: ");
                                String choice = userInput.nextLine();
                                System.out.println("Masukkan Nama Ruangan: ");
                                String roomName = userInput.nextLine();
                                System.out.println();
                                menu.getCurrentSim().getCurrentHouse().addRoom(menu.getCurrentSim(),
                                        menu.getCurrentSim().getCurrentRoom(), roomName, choice);
                            }
                        }
                        else if(numUpHouseInt == 2){
                            // TODO Delete Current Room (Room pada house Hanya bisa di delete jika lebih dari 1) & move ke some room pada house
                            menu.getCurrentSim().getCurrentHouse().deleteRoom(menu.getCurrentSim(), menu.getCurrentSim().getCurrentRoom());
                        }
                        else if(numUpHouseInt == 3){
                            // TODO add object in current room
                            System.out.println("Object Dalam Inventory Yang Dapat Ditambahkan Pada Ruangan:");
                            int i=1;
                            Iterator<Object> itr = menu.getCurrentSim().getInventory().getObjects().iterator();
                            while(itr.hasNext()){
                                Object o = itr.next();
                                if(o instanceof NonFoodObjects){
                                    System.out.println("["+i+"] " + o.getType() + " x"
                                        + menu.getCurrentSim().getInventory().getObjectNum(o.getClass().getName()));
                                    i++;
                                }
                            }
                            System.out.println("Masukkan Angka Object Yang Ingin Ditambahkan Pada Ruangan: ");
                            String choice = userInput.nextLine();
                            int choiceInt;
                            while (true) {
                                try {
                                    choiceInt = Integer.parseInt(choice);
                                    break;
                                } catch (NumberFormatException e) {
                                    System.out.println("Masukan harus dalam bentuk angka!");
                                    System.out.println("Masukkan pilihan (dalam angka): ");
                                    choice = userInput.nextLine();
                                }
                            }
                            itr = menu.getCurrentSim().getInventory().getObjects().iterator();
                            Object objAdd = null;
                            i = 1;
                            while(itr.hasNext()){
                                Object o = itr.next();
                                if(o instanceof NonFoodObjects){
                                    if(i == choiceInt){
                                        objAdd = o;
                                        break;
                                    }
                                    else{
                                        i++;
                                    }
                                }
                            }
                            if(objAdd != null){
                                menu.getCurrentSim().getInventory().removeObject(objAdd.getName());
                                System.out.println("Lokasi Object Pada Ruangan 6x6:");
                                System.out.print("Masukkan Nilai X: ");
                                String x = userInput.nextLine();
                                int xInt;
                                while (true) {
                                    try {
                                        xInt = Integer.parseInt(x);
                                        break;
                                    } catch (NumberFormatException e) {
                                        System.out.println("Masukan harus dalam bentuk angka!");
                                        System.out.print("Masukkan Nilai X: ");
                                        x = userInput.nextLine();
                                    }
                                }
                                System.out.print("Masukkan Nilai Y: ");
                                String y = userInput.nextLine();
                                int yInt;
                                while (true) {
                                    try {
                                        yInt = Integer.parseInt(y);
                                        break;
                                    } catch (NumberFormatException e) {
                                        System.out.println("Masukan harus dalam bentuk angka!");
                                        System.out.print("Masukkan Nilai X: ");
                                        y = userInput.nextLine();
                                    }
                                }
                                System.out.print("Masukkan Arah Object Pada Ruangan (Vertikal/Horizontal): ");
                                String direction = userInput.nextLine();
                                System.out.println();
                                menu.getCurrentSim().getCurrentRoom().addObject(objAdd, new Point(xInt, yInt), direction);
                                System.out.println("Object Berhasil Ditambahkan Pada Ruangan!");
                                System.out.println();
                            }
                            else{
                                System.out.println("Tidak Ada Object Yang Dapat Ditambahkan Pada Ruangan!");
                            }
                        }
                        else if(numUpHouseInt == 4){
                            // TODO delete object in current room and add to inventory owner
                            Iterator<Object> itr = menu.getCurrentSim().getCurrentRoom().getObjects();
                            System.out.println("Object Pada Ruangan Yang Dapat Dihapus:");
                            int i = 1;
                            while(itr.hasNext()){
                                System.out.println("["+i+"] "+itr.next().getName());
                                i++;
                            }
                            System.out.print("\nMasukkan Angka Object Yang Ingin Dihapus: ");
                            int choice = userInput.nextInt();
                            i = 1;
                            itr = menu.getCurrentSim().getCurrentRoom().getObjects();
                            Object objRemove = null;
                            while(itr.hasNext()){
                                Object o = itr.next();
                                if(i==choice){
                                    objRemove = o;
                                    break;
                                }
                                else{
                                    i++;
                                }
                            }
                            if(objRemove != null){
                                menu.getCurrentSim().getCurrentRoom().removeObject(objRemove, ((NonFoodObjects)objRemove).getPosition(), menu.getCurrentSim());
                                System.out.println("Object "+objRemove.getName()+" Berhasil Dihapus Dari Ruangan" );
                                System.out.println();
                            }
                            else{
                                System.out.println("Tidak Ada Object Yang Dihapus");
                                System.out.println();
                            }
                        }
                    } else if (activityNum == 9) {
                        System.out.println();
                        System.out.println("Berikut adalah kategori barang yang bisa kamu beli!");
                        System.out.println("[1] Makanan");
                        System.out.println("[2] Furnitur");

                        System.out.print("Masukkan pilihan (dalam angka): ");
                        String numBuy = userInput.nextLine();
                        int numBuyInt;
                        while (true) {
                            try {
                                numBuyInt = Integer.parseInt(numBuy);
                                if (numBuyInt != 1 && numBuyInt != 2) {
                                    System.out.println("Masukan harus dalam bentuk angka 1 atau 2!");
                                    System.out.println("Masukkan pilihan (dalam angka): ");
                                    numBuy = userInput.nextLine();
                                }
                                break;
                            } catch (NumberFormatException e) {
                                System.out.println("Masukan harus dalam bentuk angka!");
                                System.out.println("Masukkan pilihan (dalam angka): ");
                                numBuy = userInput.nextLine();
                            }
                        }

                        ArrayList<String> validObjs = new ArrayList<String>();
                        int objIdx;
                        Object wantedObject = null;

                        if (numBuyInt == 1) {
                            System.out.println("Berikut adalah makanan yang bisa kamu beli!");
                            Food.printIngredients();
                            System.out.println();

                            System.out.print("Masukkan nama makanan yang ingin kamu beli: ");

                            String wantedFood = userInput.nextLine();
                            String loweredWantedFood = wantedFood.toLowerCase().replaceAll("\\s+", "");

                            for (int i = 0; i < Food.getIngredientList().size(); i++) {
                                validObjs.add(Food.getIngredientList().get(i).toLowerCase().replaceAll("\\s+", ""));
                            }

                            while (!validObjs.contains(loweredWantedFood)) {
                                System.out.println("Makanan tidak ditemukan!");
                                System.out.print("Masukkan nama makanan yang ingin kamu beli: ");
                                wantedFood = userInput.nextLine();
                                loweredWantedFood = wantedFood.toLowerCase().replaceAll("\\s+", "");
                            }

                            objIdx = validObjs.indexOf(loweredWantedFood);

                            wantedObject = new Ingredients(Food.getIngredientList().get(objIdx));
                        } else if (numBuyInt == 2) {
                            System.out.println("Berikut adalah furnitur yang bisa kamu beli!");
                            Object.printBuyableObjects();
                            System.out.println();

                            System.out.print("Masukkan nama furnitur yang ingin kamu beli: ");

                            String wantedFurniture = userInput.nextLine();
                            String loweredWantedFurniture = wantedFurniture.toLowerCase().replaceAll("\\s+", "");

                            for (int i = 0; i < Object.getBuyableObjects().size(); i++) {
                                validObjs.add(Object.getBuyableObjects().get(i).getType().toLowerCase()
                                        .replaceAll("\\s+", ""));
                            }

                            while (!validObjs.contains(loweredWantedFurniture)) {
                                System.out.println("Furnitur tidak ditemukan!");
                                System.out.print("Masukkan nama furnitur yang ingin kamu beli: ");
                                wantedFurniture = userInput.nextLine();
                                loweredWantedFurniture = wantedFurniture.toLowerCase().replaceAll("\\s+", "");
                            }

                            objIdx = validObjs.indexOf(loweredWantedFurniture);

                            wantedObject = Object.getBuyableObjects().get(objIdx);
                        }

                        menu.getCurrentSim().buy(wantedObject);

                        System.out.println();
                    } else if (activityNum == 10) {

                    } else if (activityNum == 11) {

                    } else if (activityNum == 12) {

                    } else if (activityNum == 13) {

                    } else if (activityNum == 14) {

                    } else if (activityNum == 15) {

                    } else if (activityNum == 16) {

                    } else if (activityNum == 17) {

                    }
                } else if (commandNum == 9) {
                    System.out.println();
                    // TODO melihat waktu
                } else if (commandNum == 10) {
                    System.out.println();
                    System.out.println("Daftar Ruangan:");
                    menu.getCurrentSim().getCurrentHouse().printRooms();
                    System.out.println();
                    System.out.println("Ruangan mana yang ingin kamu tuju? (Masukkan nama ruangan)");
                    String roomName = userInput.nextLine();
                    String loweredRoomName = roomName.toLowerCase();
                    ArrayList<String> validRooms = new ArrayList<String>();
                    while (menu.getCurrentSim().getCurrentHouse().getRooms().hasNext()) {
                        validRooms.add(
                                menu.getCurrentSim().getCurrentHouse().getRooms().next().getNameRoom().toLowerCase());
                    }
                    while (!validRooms.contains(loweredRoomName)) {
                        System.out.println("Masukkan ruangan yang valid!");
                        roomName = userInput.nextLine();
                        loweredRoomName = roomName.toLowerCase();
                    }
                    menu.getCurrentSim().move(menu.getCurrentSim().getCurrentHouse().getRoom(loweredRoomName));
                }

                else if (commandNum == 11) {
                    // menu.getCurrentSim().getInventory()
                    // .addObject(new Book("BukuUwu", 1000, 5, "Meemaw"));
                    // menu.getCurrentSim().getInventory()
                    // .addObject(new Book("BukuAwa", 1000, 5, "Meemaw"));
                    // menu.getCurrentSim().getInventory()
                    // .addObject(new Book("BukuIwi", 1000, 5, "Meemaw"));
                    // menu.getCurrentSim().getInventory()
                    // .addObject(new Book("BukuEwe", 1000, 5, "Meemaw"));
                    // menu.getCurrentSim().getInventory().addObject(new SingleBed("myBed"));
                    // menu.getCurrentSim().getInventory().addObject(new SingleBed("herBed"));
                    System.out.println();
                    menu.getCurrentSim().getInventory().printInventory();
                    System.out.println();
                }

                else if (commandNum == 12) {
                    menu.exit();
                    break;
                }

                else {
                    System.out.println("Perintah tidak dikenali!");
                    System.out.println();
                }
            }
            userInput.close();
            System.exit(0);

        } else

        {
            System.out.println("Terima kasih telah bermain!");
        }
    }
}
